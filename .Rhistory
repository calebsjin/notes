bookdown:::serve_book()
blogdown:::serve_site()
bookdown:::serve_book()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
blogdown:::serve_site()
bookdown:::serve_book()
blogdown:::serve_site()
bookdown:::serve_book()
library(Matrix)
library(tidyverse)
library(caret)
library(glmnet)
library(xlsx)
library(selectiveInference)
library(rootSolve)
library(mvtnorm)
library(xtable)
library(ncvreg)
rm(list = ls())
path <- '~/Dropbox/Goh/Project_3/code/logistic-Aug28/result/'
code_name <- 'FREQ-logistic-RNA-Seq-EBIC'
## load data ##
label <- as.data.frame(read.csv(file = '~/Downloads/RNA/labels.csv'))
table(label$Class)
# BRCA COAD KIRC LUAD PRAD
# 300   78  146  141  136
# BRCA=which(label$Class=='BRCA')
# KIRC=which(label$Class=='KIRC')
data.raw.1 = filter(label, Class=="BRCA"|Class=="KIRC")
response = ifelse(data.raw.1$Class=="BRCA",1,0)
data.raw.2 <- read.csv(file="~/Downloads/RNA/data.csv")
# extract samples with class is BRCA or KIRC
data.raw.3 <- data.raw.2[which(label$Class=="BRCA"|label$Class=="KIRC"),]
# # remove missing data
# data.raw.4 <- data.raw.3[complete.cases(data.raw.3),]
# remove first column, it is character, name of samples ID
data.raw.4 <- data.raw.3[,-1]
#### Delete the 0 sum gene covariate column ####
data.raw.5 <- data.raw.4[,-which(colSums(data.raw.4==0)==dim(data.raw.4)[1])]
remove(list = paste0('data.raw.',1:4))
user.data <- cbind(response,data.raw.5)
gene.type = list(gene.var = colnames(data.raw.5))
nfold = 1
fdr.threshold  = 1e-23
set.seed(2)
t       = sample(1:nfold,size = nrow(user.data), replace = T)
gene.col = gene.type$gene.var
train  = (t==1);test   =  (t==1) # train and test
gene.col.train <- colnames(user.data)
#### univariate logistic regression fdr ####
tmp.p = rep(NA, length(gene.col.train))
tmp.p = sapply( gene.col.train, function(i){
summary( glm( response ~ . , family=binomial, data = data.frame(response = as.numeric(response == 1), as.numeric(user.data[,i])), subset = train ) )$coefficients[2,4] })
f <- adjust.p(tmp.p, pi0.method = 1)
f <- f$adjp[,2]
gene.col.train[ which( f <= fdr.threshold ) ]
fdr.gene = which( f <= fdr.threshold )
length(fdr.gene)
X.stu <- scale(cbind(user.data[,-1][,fdr.gene]),center = TRUE, scale = TRUE)
alldata <- as.data.frame(cbind(response,1, X.stu))
colnames(alldata)[2] <- "intercept"
gene.names <- colnames(alldata[,-1])
REP = 100
iter = 100
lambda = 10000
MSPE.LASSO<-rep(NA,REP)
sensitivity.LASSO<-rep(NA,REP)
specificity.LASSO <- rep(NA,REP)
EBIC.LASSO <- rep(NA,REP)
BIC.LASSO <- rep(NA,REP)
select.VAR.LASSO <- list()
MSPE.SCAD<-rep(NA,REP)
sensitivity.SCAD<-rep(NA,REP)
specificity.SCAD <- rep(NA,REP)
EBIC.SCAD <- rep(NA,REP)
BIC.SCAD <- rep(NA,REP)
select.VAR.SCAD <- list()
MSPE.MCP<-rep(NA,REP)
sensitivity.MCP<-rep(NA,REP)
specificity.MCP <- rep(NA,REP)
EBIC.MCP <- rep(NA,REP)
BIC.MCP <- rep(NA,REP)
select.VAR.MCP <- list()
MSPE.ENET<-rep(NA,REP)
sensitivity.ENET<-rep(NA,REP)
specificity.ENET <- rep(NA,REP)
EBIC.ENET <- rep(NA,REP)
BIC.ENET <- rep(NA,REP)
select.VAR.ENET <- list()
for (i in 1:REP) {
print(i)
# i=1
set.seed(1314+i)
training.samples <- alldata$response %>% createDataPartition(p=0.7, list = FALSE)
train.data <- alldata[training.samples,]
test.data <- alldata[-training.samples,]
X <- as.matrix(train.data[,-1])
y <- train.data$response
x.test <- as.matrix(test.data[,-1]) # remove reponse
y.test <- test.data$response
n=dim(X)[1]
p=dim(X)[2]
full.model <- 1:p
gamma_y1 <- which(y==1)
gamma_y0 <- (1:n)[-gamma_y1]
t1 <- Sys.time()
X.matrix = X[,-1] # remove intercept
### LASSO ###
## use cv to select lambda ##
# cv.LASSO <- cv.glmnet(X.matrix, y, alpha = 1, family = "binomial")
# model.LASSO <- glmnet(X.matrix, y, alpha = 1, family = "binomial", intercept = FALSE,
#                       lambda = cv.LASSO$lambda.min)
# hat.G1.LASSO <- which(as.numeric(model.LASSO$beta)!=0)
fit.LASSO<-glmnet(X.matrix,y,intercept=FALSE,family="binomial",alpha=1)
hat.BETA.LASSO <- as.matrix(fit.LASSO$beta)
n.lambda <- length(fit.LASSO$lambda)
EBIC.LASSO0 <- rep(NA,n.lambda)
for (i0 in 1:n.lambda) {
choice.lasso=which(hat.BETA.LASSO[,i0]!=0)
len.choice <- length(choice.lasso)
if (len.choice >= 1) {
EBIC.LASSO0[i0] <- BIC(glm(y~X.matrix[,choice.lasso], family = "binomial")) + 2*lchoose(p,len.choice+1)
}
}
hat.G1.LASSO <- which(hat.BETA.LASSO[,which.min(EBIC.LASSO0)]!=0)
select.VAR.LASSO[[i]] <- hat.G1.LASSO
X2 <- as.matrix(X.matrix[,hat.G1.LASSO])
model <- glm(y~X2, family = "binomial")
summary(model)
x.test.1 <- as.matrix(x.test[,-1][,hat.G1.LASSO]) # remove the intercept
X2 <- as.matrix(x.test.1)
pred.LASSO <- predict(model, as.data.frame(X2), type = "response")
pred.class.LASSO <- ifelse(pred.LASSO>0.5, 1,0)
MSPE.LASSO[i] = sqrt(mean((y.test - pred.LASSO)^2))
sensitivity.LASSO[i] <- mean(which(y.test==1) %in% which(pred.class.LASSO==1))
specificity.LASSO[i] <- mean(which(y.test==0) %in% which(pred.class.LASSO==0))
BIC.LASSO[i] <- BIC(glm(y~X.matrix[,hat.G1.LASSO], family = "binomial"))
EBIC.LASSO[i] <- BIC.LASSO[i] + 2*lchoose(p,length(hat.G1.LASSO))
### ENET ###
## use cv to select lambda ##
# cv.ENET <- cv.glmnet(X.matrix, y, alpha = 0.5, family = "binomial")
# model.ENET <- glmnet(X.matrix, y, alpha = 0.5, family = "binomial",intercept = FALSE,
#                      lambda = cv.ENET$lambda.min)
# hat.G1.ENET <- which(as.numeric(model.ENET$beta)!=0)
fit.ENET<-glmnet(X.matrix,y,intercept=FALSE,family = "binomial",alpha=0.5) #alpha=0.5 ENET, alpha=0 Ridge
hat.BETA.ENET <- as.matrix(fit.ENET$beta)
n.lambda <- length(fit.ENET$lambda)
EBIC.ENET0 <- rep(NA,n.lambda)
for (i0 in 1:n.lambda) {
choice.enet=which(hat.BETA.ENET[,i0]!=0)
len.choice <- length(choice.enet)
if (len.choice>=1) {
EBIC.ENET0[i0] <- BIC(glm(y~X.matrix[,choice.enet], family = "binomial")) + 2*lchoose(p,len.choice+1)
}
}
hat.G1.ENET <- which(hat.BETA.ENET[,which.min(EBIC.ENET0)]!=0)
select.VAR.ENET[[i]] <- hat.G1.ENET
X2 <- as.matrix(X.matrix[,hat.G1.ENET])
model <- glm(y~X2, family = "binomial")
summary(model)
x.test.1 <- as.matrix(x.test[,-1][,hat.G1.ENET])
X2 <- as.matrix(x.test.1)
pred.ENET <- predict(model, as.data.frame(X2), type = "response")
pred.class.ENET <- ifelse(pred.ENET>0.5, 1,0)
MSPE.ENET[i] = sqrt(mean((y.test - pred.ENET)^2))
sensitivity.ENET[i] <- mean(which(y.test==1) %in% which(pred.class.ENET==1))
specificity.ENET[i] <- mean(which(y.test==0) %in% which(pred.class.ENET==0))
BIC.ENET[i] <- BIC(glm(y~X.matrix[,hat.G1.ENET], family = "binomial"))
EBIC.ENET[i] <- BIC.ENET[i] + 2*lchoose(p,length(hat.G1.ENET))
### MCP ###
## use cv to select lambda ##
# cv.MCP <- cv.ncvreg(X.matrix, y, alpha = 1, family = "binomial",
#                     intercept = FALSE,penalty = "MCP",gamma = 10)
# model.MCP <- ncvreg(X.matrix, y, alpha = 1, family = "binomial",
#                     intercept = FALSE,penalty = "MCP",gamma = 10,
#                     lambda = cv.MCP$lambda.min)
# hat.G1.MCP <- which(as.numeric(model.MCP$beta)!=0)
fit.MCP<-ncvreg(X.matrix,y,family = "binomial",gamma=10,alpha=1,penalty="MCP")
hat.BETA.MCP <- as.matrix(fit.MCP$beta)[-1,]
n.lambda <- length(fit.MCP$lambda)
EBIC.MCP0 <- rep(NA,n.lambda)
for (i0 in 1:n.lambda) {
choice.mcp=which(hat.BETA.MCP[,i0]!=0)
len.choice <- length(choice.mcp)
if (len.choice>=1) {
EBIC.MCP0[i0] <- BIC(glm(y~X.matrix[,choice.mcp], family = "binomial")) + 2*lchoose(p,len.choice+1)
}
}
hat.G1.MCP <- which(hat.BETA.MCP[,which.min(EBIC.MCP0)]!=0)
select.VAR.MCP[[i]] <- hat.G1.MCP
X2 <- as.matrix(X.matrix[,hat.G1.MCP])
model <- glm(y~X2, family = "binomial")
summary(model)
x.test.1 <- as.matrix(x.test[,-1][,hat.G1.MCP])
X2 <- as.matrix(x.test.1)
pred.MCP <- predict(model, as.data.frame(X2), type = "response")
pred.class.MCP <- ifelse(pred.MCP>0.5, 1,0)
MSPE.MCP[i] = sqrt(mean((y.test - pred.MCP)^2))
sensitivity.MCP[i] <- mean(which(y.test==1) %in% which(pred.class.MCP==1))
specificity.MCP[i] <- mean(which(y.test==0) %in% which(pred.class.MCP==0))
BIC.MCP[i] <- BIC(glm(y~X.matrix[,hat.G1.MCP], family = "binomial"))
EBIC.MCP[i] <- BIC.MCP[i] + 2*lchoose(p,length(hat.G1.MCP))
# gene.MCP <- gene.names[hat.G1.MCP]
### SCAD ###
## use cv to select lambda ##
# cv.SCAD <- cv.ncvreg(X.matrix, y, alpha = 1, family = "binomial",
#                      intercept = FALSE, penalty = "SCAD",gamma = 10)
# model.SCAD <- ncvreg(X.matrix, y, alpha = 1, family = "binomial",
#                      intercept = FALSE,penalty = "SCAD",gamma = 10,
#                      lambda = cv.SCAD$lambda.min)
# hat.G1.SCAD <- which(as.numeric(model.SCAD$beta)!=0)
fit.SCAD<-ncvreg(X.matrix,y,family = "binomial",gamma=10,alpha=1,penalty="SCAD")
hat.BETA.SCAD <- as.matrix(fit.SCAD$beta)[-1,]
n.lambda <- length(fit.SCAD$lambda)
EBIC.SCAD0 <- rep(NA,n.lambda)
for (i0 in 1:n.lambda) {
choice.SCAD=which(hat.BETA.SCAD[,i0]!=0)
len.choice <- length(choice.SCAD)
if (len.choice>=1) {
EBIC.SCAD0[i0] <- BIC(glm(y~X.matrix[,choice.SCAD], family = "binomial")) + 2*lchoose(p,len.choice+1)
}
}
hat.G1.SCAD <- which(hat.BETA.SCAD[,which.min(EBIC.SCAD0)]!=0)
select.VAR.SCAD[[i]] <- hat.G1.SCAD
X2 <- as.matrix(X.matrix[,hat.G1.SCAD])
model <- glm(y~X2, family = "binomial")
summary(model)
x.test.1 <- as.matrix(x.test[,-1][,hat.G1.SCAD])
X2 <- as.matrix(x.test.1)
pred.SCAD <- predict(model, as.data.frame(X2), type = "response")
pred.class.SCAD <- ifelse(pred.SCAD>0.5, 1,0)
MSPE.SCAD[i] = sqrt(mean((y.test - pred.SCAD)^2))
sensitivity.SCAD[i] <- mean(which(y.test==1) %in% which(pred.class.SCAD==1))
specificity.SCAD[i] <- mean(which(y.test==0) %in% which(pred.class.SCAD==0))
BIC.SCAD[i] <- BIC(glm(y~X.matrix[,hat.G1.SCAD], family = "binomial"))
EBIC.SCAD[i] <- BIC.SCAD[i] + 2*lchoose(p,length(hat.G1.SCAD))
SSM <- data.frame(matrix(c(sensitivity.LASSO[i], specificity.LASSO[i], MSPE.LASSO[i],EBIC.LASSO[i],
sensitivity.ENET[i], specificity.ENET[i], MSPE.ENET[i], EBIC.MCP[i],
sensitivity.MCP[i], specificity.MCP[i], MSPE.MCP[i],EBIC.MCP[i],
sensitivity.SCAD[i], specificity.SCAD[i], MSPE.SCAD[i],EBIC.SCAD[i]
), nrow = 4, byrow = TRUE), row.names = c('LASSO','ENET','MCP','SCAD'))
colnames(SSM) <- c("SEN", "SPE","MSPE","EBIC")
print(SSM)
}
MSPE <- colMeans(cbind(MSPE.LASSO,MSPE.ENET,MSPE.MCP,MSPE.SCAD))
SEN <- colMeans(cbind( sensitivity.LASSO,sensitivity.ENET,sensitivity.MCP,sensitivity.SCAD))
SPEC <- colMeans(cbind(specificity.LASSO,specificity.ENET,specificity.MCP,specificity.SCAD))
BIC1 <- colMeans(cbind(BIC.LASSO, BIC.ENET, BIC.MCP, BIC.SCAD))
EBIC <- colMeans(cbind(EBIC.LASSO, EBIC.ENET, EBIC.MCP, EBIC.SCAD))
result <- data.frame(cbind(MSPE,SEN,SPEC,BIC1,EBIC), row.names = c('LASSO','ENET','MCP','SCAD'))
result
save(list = ls(), file = paste0(path,code_name,'.RData'))
